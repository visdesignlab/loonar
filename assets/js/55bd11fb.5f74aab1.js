"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[541],{8435:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=t(4848),s=t(8453);const a={},o="Loon Data",r={id:"loon-for-scientists/data",title:"Loon Data",description:"At a high level the data expects feature tables as CSV, images as TIFF files, and cell segmentation boundaries as GeoJSON files. All of these files are explicitly linked together with JSON files.",source:"@site/docs/loon-for-scientists/data.md",sourceDirName:"loon-for-scientists",slug:"/loon-for-scientists/data",permalink:"/loonar/docs/loon-for-scientists/data",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Local Loon Quick Start Guide",permalink:"/loonar/docs/loon-for-scientists/quickstart"},next:{title:"Official Loon Docker Images",permalink:"/loonar/docs/loon-for-scientists/loon-wrappers"}},d={},l=[{value:"<code>aa_index.json</code>",id:"aa_indexjson",level:2},{value:"Experiment Metadata File",id:"experiment-metadata-file",level:2},{value:"Header Transforms",id:"header-transforms",level:3},{value:"Location Metadata List",id:"location-metadata-list",level:3},{value:"Tags",id:"tags",level:3},{value:"Composite Tabular Data File",id:"composite-tabular-data-file",level:3},{value:"<code>Segmentations Folder</code>",id:"segmentations-folder",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"loon-data",children:"Loon Data"}),"\n",(0,i.jsx)(n.p,{children:"At a high level the data expects feature tables as CSV, images as TIFF files, and cell segmentation boundaries as GeoJSON files. All of these files are explicitly linked together with JSON files."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Overview Figure of data structure",src:t(2545).A+"",width:"3444",height:"1976"})}),"\n",(0,i.jsx)(n.p,{children:"The location of the other files is flexible. The filenames should include the entire path relative to the base directory of the data set in your configuration."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"When using Loon with MinIO enabled, data can only be added to Loon using the upload feature. This will standardize the naming conventions and locations of the files in that directory."})}),"\n",(0,i.jsx)(n.h2,{id:"aa_indexjson",children:(0,i.jsx)(n.code,{children:"aa_index.json"})}),"\n",(0,i.jsxs)(n.p,{children:["This file contains a list of experiment metadata files. This file must contain an ",(0,i.jsx)(n.code,{children:"experiments"})," attribute at the top level. The names of the experiment files can be anything, however, more descriptive names are better."]}),"\n",(0,i.jsx)(n.p,{children:"Example Content:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "experiments": [\n    "experiment_1.json",\n    "experiment_2.json",\n    "experiment_3.json",\n    "experiment_4.json",\n    "experiment_5.json",\n    "experiment_6.json",\n    "experiment_7.json"\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"experiment-metadata-file",children:"Experiment Metadata File"}),"\n",(0,i.jsx)(n.p,{children:"Each experiment metadata file is stored as a JSON file. This defines some metadata aspects of the experiment and points to the other data files."}),"\n",(0,i.jsx)(n.p,{children:"At the top level it expects the following attributes:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Attribute"}),(0,i.jsx)(n.th,{children:"Definition"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"name"})}),(0,i.jsx)(n.td,{children:"Name of the experiment as it should appear in the Loon dashboard."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"headers"})}),(0,i.jsx)(n.td,{children:"The list of column names in the CSV feature tables. The order should match the CSV files."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"headerTransforms"})}),(0,i.jsxs)(n.td,{children:["Defines the name of certain special columns (",(0,i.jsx)(n.code,{children:"time"}),", ",(0,i.jsx)(n.code,{children:"frame"}),", ",(0,i.jsx)(n.code,{children:"id"}),", ",(0,i.jsx)(n.code,{children:"parent"}),", ",(0,i.jsx)(n.code,{children:"mass"}),", ",(0,i.jsx)(n.code,{children:"x"}),", ",(0,i.jsx)(n.code,{children:"y"}),"). This is optional if the name already exactly matches in headers. See ",(0,i.jsx)(n.a,{href:"#header-transforms",children:"the table below"})," for information about these special columns."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"locationMetadataList"})}),(0,i.jsxs)(n.td,{children:["A list of imaging location metadata. Each imaging location will include an ",(0,i.jsx)(n.code,{children:"id"}),", ",(0,i.jsx)(n.code,{children:"tabularDataFilename"}),", ",(0,i.jsx)(n.code,{children:"imageDataFilename"}),", and ",(0,i.jsx)(n.code,{children:"segmentationsFolder"}),". See ",(0,i.jsx)(n.a,{href:"#location-metadata-list",children:"the table below"})," for more information on each of these."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"compositeTabularDataFilename"})}),(0,i.jsxs)(n.td,{children:["Specifies the path to the combined tabular data file. See the ",(0,i.jsx)(n.a,{href:"#composite-tabular-data-file",children:"section below"})," for  more information."]})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"header-transforms",children:"Header Transforms"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Attribute"}),(0,i.jsx)(n.th,{children:"Definition"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"frame"})}),(0,i.jsx)(n.td,{children:"The frame number indicates which number image the data row comes from in a sequence of images."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"time"})}),(0,i.jsx)(n.td,{children:"The time when the image was recorded. Often this is relative to the start of the experiment. If this is not explicitly recorded, then the the frame number can be used as a proxy."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:"The unique ID for a particular tracked cell. This should be the same across frames for that cell's lifetime."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"parent"})}),(0,i.jsxs)(n.td,{children:["The ",(0,i.jsx)(n.code,{children:"id"})," of the parent cell. If this is not tracked at all for an experiment, then map this column to the same one as the ",(0,i.jsx)(n.code,{children:"id"})," column."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"mass"})}),(0,i.jsx)(n.td,{children:"The mass of the cell."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"x"})}),(0,i.jsx)(n.td,{children:"The X coordinate for the cell's center position in pixel space. (It does not matter what definition of center is used.)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"y"})}),(0,i.jsx)(n.td,{children:"Same, but for the Y coordinate."})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"location-metadata-list",children:"Location Metadata List"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Attribute"}),(0,i.jsx)(n.th,{children:"Definition"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:"A unique name for this location. Can be anything, but will be displayed in the interface, so a more descriptive name is better."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tabularDataFilename"})}),(0,i.jsx)(n.td,{children:"The location of the CSV file feature table for this experiment."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"imageDataFilename"})}),(0,i.jsxs)(n.td,{children:["The location of the OME TIFF image file. This should be a ",(0,i.jsx)(n.code,{children:"*.companion.ome"})," file."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:" segmentationsFolder"})}),(0,i.jsxs)(n.td,{children:["This folder contains all of the segmentation files for a given location. See the ",(0,i.jsx)(n.a,{href:"#segmentations-folder",children:"section on segmentations"})," for more details."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tags"})}),(0,i.jsxs)(n.td,{children:["A JSON object containing key-value pairs that capture metadata about the particular location. See the ",(0,i.jsx)(n.a,{href:"#tags",children:"tags section"})," for more information and some examples."]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"So, altogether a single experiment metadata file should look something like the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n  "name":"ExperimentOne",\n  "headers": [\n    "Frame",\n    "Tracking ID",\n    "Lineage ID",\n    "Position X (\xb5m)",\n    "Position Y (\xb5m)",\n    "Pixel Position X (pixels)",\n    "Pixel Position Y (pixels)",\n    "Volume (\xb5m\xb3)",\n    "Radius (\xb5m)",\n    "Area (\xb5m\xb2)",\n    "Sphericity ()",\n    "Dry Mass (pg)",\n    "Track Length (\xb5m)",\n    "Parent ID"\n  ],\n  "headerTransforms": {\n    "time": "Frame",\n    "frame": "Frame",\n    "id": "Tracking ID",\n    "parent": "Parent ID",\n    "mass": "Dry Mass (pg)",\n    "x": "Pixel Position X (pixels)",\n    "y": "Pixel Position Y (pixels)"\n  },\n  "compositeTabularDataFilename":"experiment1/composite_tabular_data_file.parquet",\n  "locationMetadataList": [\n    {\n      "id": "Condition A",\n      "tabularDataFilename": "experiment1/location_A/Table_A.csv",\n      "imageDataFilename": "experiment1/location_A/images_A.companion.ome",\n      "segmentationsFolder": "experiment1/location_A/segmentations_A",\n      "tags":{\n        "drug":"drug_1",\n        "concentration":"0.1"\n      }\n    },\n    {\n      "id": "Condition B",\n      "tabularDataFilename": "experiment1/location_B/Table_B.csv",\n      "imageDataFilename": "experiment1/location_B/images_B.companion.ome",\n      "segmentationsFolder": "experiment1/location_B/segmentations_B"\n      "tags":{}\n    },\n    {\n      "id": "Condition C",\n      "tabularDataFilename": "experiment1/location_C/Table_C.csv",\n      "imageDataFilename": "experiment1/location_C/images_C.companion.ome",\n      "segmentationsFolder": "experiment1/location_C/segmentations_C",\n      "tags":{\n        "drug":"drug_2",\n      }\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"tags",children:"Tags"}),"\n",(0,i.jsx)(n.p,{children:"Tags are used to define metadata about an individual location. This is used in the Loon UI to specify specific conditions corresponding to the location. The tags object has no restrictions. For example, locations have have completely different sets of tags, locations may have no tags, and locations can overlap on one more tags."}),"\n",(0,i.jsx)(n.p,{children:"For example, suppose we have three locations. Your tags may look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "id": "location_1",\n    ...\n    "tags": {\n      "drug": "drug_1",\n      "concentration":"0.1"\n    }\n  },\n  {\n    "id": "location_2",\n    ...\n    "tags": {}\n  },\n  {\n    "id": "location_3",\n    ...\n    "tags": {\n      "drug": "drug_3"\n    }\n  }\n]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"composite-tabular-data-file",children:"Composite Tabular Data File"}),"\n",(0,i.jsx)(n.p,{children:'This key specifies the location (relative to the root of the current experiment directory) of a "combined metadata table" as a parquet file.'}),"\n",(0,i.jsx)(n.p,{children:"This table must be the union of each of the individual location metadata csv files with an additional location column and the union of all tags separated as columns as well."}),"\n",(0,i.jsxs)(n.p,{children:["For example, suppose we use the example from ",(0,i.jsx)(n.a,{href:"#tags",children:"tags section"}),". Then, a sample of 6 rows of our parquet file would be something like this:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"location"}),(0,i.jsx)(n.th,{children:"{rest_of_headers}"}),(0,i.jsx)(n.th,{children:"drug"}),(0,i.jsx)(n.th,{children:"concentration"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"location_1"}),(0,i.jsx)(n.td,{children:". . ."}),(0,i.jsx)(n.td,{children:"drug_1"}),(0,i.jsx)(n.td,{children:"0.1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"location_1"}),(0,i.jsx)(n.td,{children:". . ."}),(0,i.jsx)(n.td,{children:"drug_1"}),(0,i.jsx)(n.td,{children:"0.1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"location_2"}),(0,i.jsx)(n.td,{children:". . ."}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"location_2"}),(0,i.jsx)(n.td,{children:". . ."}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"location_3"}),(0,i.jsx)(n.td,{children:". . ."}),(0,i.jsx)(n.td,{children:"drug_3"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"location_3"}),(0,i.jsx)(n.td,{children:". . ."}),(0,i.jsx)(n.td,{children:"drug_3"}),(0,i.jsx)(n.td,{})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Here, the empty spaces denote empty strings."}),"\n",(0,i.jsx)(n.h2,{id:"segmentations-folder",children:(0,i.jsx)(n.code,{children:"Segmentations Folder"})}),"\n",(0,i.jsxs)(n.p,{children:["Each imaging location should have a corresponding folder that contains all of the segmentation files. The names of the files must correspond to the imaging frame. That is ",(0,i.jsx)(n.code,{children:"1.json"})," will contain all of the cell segmentations for the first frame., ",(0,i.jsx)(n.code,{children:"2.json"})," will contain the second frame, and so on. Each json file must follow the GeoJSON specification. In addition to the standard geometry attribute, the ",(0,i.jsx)(n.code,{children:"bbox"})," attribute must be defined. To link the segmentations with the corresponding metadata the cell ",(0,i.jsx)(n.code,{children:"id"})," defined in the feature table must be included as an ",(0,i.jsx)(n.code,{children:"ID"})," in the GeoJSON properties object."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Often, segmentations are instead generated as ",(0,i.jsx)(n.code,{children:"*.roi"})," files. When uploading using MinIO, Loon will automatically convert the ",(0,i.jsx)(n.code,{children:".roi"})," files to proper GeoJSON format. If you are instead using Loon without MinIO (i.e. using Local Loon), you will have to convert the ",(0,i.jsx)(n.code,{children:".roi"})," files to GeoJSON yourself. ",(0,i.jsx)(n.a,{href:"https://github.com/visdesignlab/aardvark-util/blob/main/roi_to_geojson.py",children:"Here"})," is a Python script which can convert ",(0,i.jsx)(n.code,{children:".roi"})," to GeoJSON from on of our accompanying repositories."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},2545:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/overview-5b246410402d8117c35e7bca3b40cd22.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);